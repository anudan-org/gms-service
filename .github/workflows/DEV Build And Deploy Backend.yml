# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: DEV Build And Deploy Backend

on:
  workflow_dispatch: 
  push:
   branches: [ dev ]
   paths-ignore: 
      - '.github/**'
      - 'DB/**'
      - 'gradle/**'
      - '.DS_Store'
      - '.gitignore'
      - '**.md'
      - '**.gradle'
      - 'gradlew'
      - '**.bat'
      - '**.properties'
env:
  commitmsg: ${{ github.event.head_commit.message }} 

jobs:
  DEV-Backend-Build:
    
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    name: Build Backend | DEV
    steps:
      - name: Checking out my release repo
        uses: actions/checkout@v2
        with:
          repository: anudan-org/gms-service
          token: ${{ secrets.MY_PAT }}
          ref: dev
      - run: pwd
      - run: ls -lrt
      - run: ./gradlew bootJar
      - run: pwd
      - run: ls -lrt

      - name: upload anudan backend artifact to github. 
        uses: actions/upload-artifact@master
        with:
          name: Anudan-backend-artifact
          path: build/libs/gms-service-0.0.1-SNAPSHOT.jar
          retention-days: 1

  unit-and-functional-testing-Backend:
    runs-on: ubuntu-latest
    needs: DEV-Backend-Build
    if: github.ref == 'refs/heads/dev'
    name: Test Backend | Units and Functions
    steps: 
    - name: checking out gms-service repo
      uses: actions/checkout@v2
      with:
          repository: anudan-org/gms-service
          token: ${{ secrets.MY_PAT }}
          ref: dev
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
          java-version: 1.8      
    - name: test backend code(functional)
      run: |
        ls -l
        ./gradlew test jacocoTestReport
    #- name: test backend code(unit) Run JUnit Test and record results
    #  run: ./gradlew test jacocoTestReport 
  
  Static-Code-Analysis-Sonarqube-Backend:
    runs-on: ubuntu-latest
    needs: DEV-Backend-Build
    if: github.ref == 'refs/heads/dev'
    name: Analyse Static Code | Sonarqube
    steps:
    - uses: actions/checkout@v2
      with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        ref: dev
    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
          java-version: 11
    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
    - name: Cache Gradle packages
      uses: actions/cache@v1
      with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
    - name: analyze
      env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  
    
      run: ./gradlew  sonarqube --info   
            -Dsonar.organization=anudan
            -Dsonar.projectKey=gms-service-dev
            -Dsonar.projectName=gms-service/dev
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=src/main/java
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sonar.binaries=build/classes
            -Dsonar.sonar.dynamicAnalysis=reuseReports
            -Dsonar.sonar.junit.reportsPath=build/test-results/test
            -Dsonar.sonar.java.coveragePlugin=jacoco
            -Dsonar.sonar.jacoco.reportPath=build/jacoco/jacoco.exec  
            -DsystemProp.sonar.login=${{ secrets.SONAR_TOKEN }}   
    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        scanMetadataReportFile: build/sonar/report-task.txt            


  Anudan-config:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    name: Checkout application.yaml | anudan config 
    steps: 
      - name: Checking out my anudan-config repo
        uses: actions/checkout@master
        with:
          repository: anudan-org/anudan-config   
          token: ${{ secrets.MY_PAT }}
      - run: pwd
      - run: ls -lrt     
      - name: anudan-backend-config artifact building to github. 
        uses: actions/upload-artifact@v2
        with:
          name: Anudan-Backend-Configuration
          path: backend/application.yaml
          retention-days: 1 

            
  Trigger-Dev-Release:
      runs-on: ubuntu-latest
      needs: [unit-and-functional-testing-Backend, Static-Code-Analysis-Sonarqube-Backend]
      if: github.ref == 'refs/heads/dev'
      name: Create Dev Release Version
      steps:      
        - name: DEV-deployment  
          uses: convictional/trigger-workflow-and-wait@v1.3.0
          with:
            owner: anudan-org
            repo: anudan-app
            github_token: ${{ secrets.MY_PAT }}
            workflow_file_name: Dev-Package.yml
            ref: dev

  Release-repo-checkout:
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/dev' 
      name: Checkout release.json
      needs: [Trigger-Dev-Release]
      steps:
        - uses: actions/checkout@v2
          with:
            repository: anudan-org/release   
            token: ${{ secrets.MY_PAT }}
        - name: upload release.json artifact to github. 
          uses: actions/upload-artifact@v2
          with:
            name: Anudan-Dev-Release
            path: Dev_release.json
            retention-days: 1           
        
  #https://github.com/marketplace/actions/rsync-deployments-action
  Rsync-Dev-Deployments:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev'
    needs: [DEV-Backend-Build, unit-and-functional-testing-Backend, Static-Code-Analysis-Sonarqube-Backend, Anudan-config, Release-repo-checkout]
    name: Copy artifacts to Dev server
    steps:
    - name: downloading Anudan-backend-artifact arifact from github. 
      uses: actions/download-artifact@v2
      with:
        name: Anudan-backend-artifact 
    - name: downloading Anudan-Backend-Configuration arifact from github. 
      uses: actions/download-artifact@v2
      with:
        name:  Anudan-Backend-Configuration   
    - name: downloading Anudan-Dev-Release artifact from github. 
      uses: actions/download-artifact@v2
      with:
          name: Anudan-Dev-Release     
    - run: |  
          ls -lrt
          mv Dev_release.json release.json
          ls -lrt       
    - name: copy artifacts to Dev Server. 
      uses: burnett01/rsync-deployments@4.1 
      with:
        switches: -avzr -q
        path: .
        remote_path: /home/anudan/github
        remote_host: ${{ secrets.HOST_DEV}}
        remote_port: ${{ secrets.SSH_PORT }}
        remote_user: ${{ secrets.SSH_USER }}
        remote_key: ${{ secrets.SSH_DEPLOY_KEY }}   

  Notify-on-email:
    runs-on: ubuntu-latest
    if: always()
    needs: [DEV-Backend-Build, unit-and-functional-testing-Backend, Static-Code-Analysis-Sonarqube-Backend, Anudan-config, Rsync-Dev-Deployments, Trigger-Dev-Release]
    name: Notify Via Email
    steps:
      - name: Anudan Release artifact downloading from github.    
        uses: actions/download-artifact@v2
        with:
            name: Anudan-Dev-Release

      - name: set env variable with bash expression 
        run:   |
          ls -lrt
          echo "Dev_Version=`cat Dev_release.json| cut -d "," -f1 | cut -d ":" -f2 | sed 's/"//g' | sed 's/}//g'`" >> $GITHUB_ENV
      - name: Send some mail
        if: always()
        uses: wadeww/send-email-action@master
        with:
          server_address: smtp.gmail.com
          port: ${{ secrets.SMTP_SERVER_PORT }}
          username: ${{ secrets.AUTH_USER }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject:  DEV Build & Deploy Finished | Backend
          body: Organization Name/Repository - ${{github.repository}}
          
           ${{ github.actor }} commit message - ${{ env.commitmsg }}

                
                1. Build Result - ${{needs.DEV-Backend-Build.result}} 
               
                2. Test Result (units and functionals) - ${{needs.unit-and-functional-testing-Backend.result}} 

                3. Static Code Analysis Result - ${{needs.Static-Code-Analysis-Sonarqube-Backend.result}}

                4. Checkout application.yaml Result - ${{needs.Anudan-config.result}} 
                
                5. Copy Artifacts To DEV Server - ${{needs.Rsync-Dev-Deployments.result}}

                6. Dev Version Release Result - ${{needs.Trigger-Dev-Release.result}}

                7. Anudan - Grant Management System â€º DEV Build - ${{ env.Dev_Version }}
                

          to: ${{ secrets.TO_ADDRESSES }}
          from: ${{ secrets.FROM_ADDRESS }}      
