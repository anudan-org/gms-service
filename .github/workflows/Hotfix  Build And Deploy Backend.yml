name: Hotfix Build And Deploy Backend

on:
  workflow_dispatch:
  push:
   branches: [ hotfix/production_bug_fixes ] 
   paths-ignore: 
      - '.github/workflows/**.yml'
      - 'DB/**'
      - 'gradle/**'
      - '.DS_Store'
      - '.gitignore'
      - '**.md'
      - '**.gradle'
      - 'gradlew'
      - '**.bat'
      - '**.properties'

env:
  commitmsg: ${{ github.event.head_commit.message }}     

jobs:
  Hotfix-Backend-Build:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
    name: Build Backend | Hotfix
    steps:
      - name: Checking out gms-service repo
        uses: actions/checkout@v2
        with:
          repository: anudan-org/gms-service
          token: ${{ secrets.MY_PAT }}
          ref: hotfix/production_bug_fixes
      - run: pwd
      - run: ls -lrt
      - run: ./gradlew bootJar
      - run: pwd
      - run: ls -lrt

      - name: uploading anudan backend artifact
        uses: actions/upload-artifact@master
        with:
          name: Anudan-backend-artifact 
          path: build/libs/gms-service-0.0.1-SNAPSHOT.jar
          retention-days: 1

  unit-and-functional-testing-Backend:
    runs-on: ubuntu-latest
    needs: Hotfix-Backend-Build
    if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
    name: Test Backend | units and functions
    steps: 
    - name: checking out gms-service repo
      uses: actions/checkout@v2
      with:
          repository: anudan-org/gms-service
          token: ${{ secrets.MY_PAT }}
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
          java-version: 1.8      
    - name: test backend code(functional)
      run: |
        ls -l
        ./gradlew test jacocoTestReport


  Static-Code-Analysis-Sonarqube-Backend:
     runs-on: ubuntu-latest
     needs: Hotfix-Backend-Build
     name: Analyse Static Code | Sonarqube
     if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
     steps:
     - uses: actions/checkout@v2
       with:
        # Disabling shallow clone is recommended for improving relevancy of reporting
        fetch-depth: 0
        ref: refs/heads/hotfix/production_bug_fixes
     - name: Set up JDK 11
       uses: actions/setup-java@v1
       with:
          java-version: 11
     - name: Cache SonarCloud packages
       uses: actions/cache@v1
       with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
     - name: Cache Gradle packages
       uses: actions/cache@v1
       with:
          path: ~/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
          restore-keys: ${{ runner.os }}-gradle
     - name: analyze
       env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       run: ./gradlew  sonarqube --info   
            -Dsonar.organization=anudan
            -Dsonar.projectKey=gms-service-hotfix
            -Dsonar.projectName=gms-service/hotfix
            -Dsonar.projectVersion=1.0
            -Dsonar.sources=src/main/java
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.sonar.binaries=build/classes
            -Dsonar.sonar.dynamicAnalysis=reuseReports
            -Dsonar.sonar.junit.reportsPath=build/test-results/test
            -Dsonar.sonar.java.coveragePlugin=jacoco
            -Dsonar.sonar.jacoco.reportPath=build/jacoco/jacoco.exec  
     - name: SonarQube Quality Gate check
       uses: sonarsource/sonarqube-quality-gate-action@master
       env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
       with:
        scanMetadataReportFile: build/sonar/report-task.txt                 

  Anudan-config:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
    name: Checkout application.yaml | Anudan config
    steps: 
      - name: Checking out my anudan-config repo
        uses: actions/checkout@master
        with:
          repository: anudan-org/anudan-config   
          token: ${{ secrets.MY_PAT }}
      - run: pwd
      - run: ls -lrt     
      - name: anudan-config artifact uploadig to github. 
        uses: actions/upload-artifact@v2
        with:
          name: Anudan-Configuration
          path: backend/application.yaml
          retention-days: 1 
  

  Trigger-Hotfix-Release:
      runs-on: ubuntu-latest
      needs: [unit-and-functional-testing-Backend, Static-Code-Analysis-Sonarqube-Backend]
      if: github.ref == 'refs/heads/hotfix/production_bug_fixes' 
      name: Create Hotfix Release Version
      steps:      
        - name: Hotfix-deployment 
          uses: convictional/trigger-workflow-and-wait@v1.3.0
          with:
            owner: anudan-org
            repo: anudan-app
            github_token: ${{ secrets.MY_PAT }}
            workflow_file_name: Hotfix-package.yml
            ref: hotfix/production_bug_fixes

  Release-repo-checkout:
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
      name: Checkout release.json
      needs: [Trigger-Hotfix-Release]
      steps:
        - uses: actions/checkout@v2
          with:
            repository: anudan-org/release   
            token: ${{ secrets.MY_PAT }}
        - name: set variables
          run: | 
             echo "major=`cat release.json | cut -d "," -f4 | cut -d ":" -f2 | sed 's/"//g' | sed 's/}//g'`" >> $GITHUB_ENV  
             echo "minor=`cat release.json | cut -d "," -f5 | cut -d ":" -f2 | sed 's/"//g' | sed 's/}//g'`" >> $GITHUB_ENV  
             echo "releaseCandidate=`cat release.json | cut -d "," -f1 | cut -d ":" -f2 | sed 's/"//g'`" >> $GITHUB_ENV 
             echo "productionRelease=`cat release.json | cut -d "," -f2 | cut -d ":" -f2 | sed 's/"//g'`" >> $GITHUB_ENV
             echo "hotFixRelease=`cat release.json | cut -d "," -f3 |cut -d ":" -f2 | sed 's/"//g' |sed 's/}//g'`" >> $GITHUB_ENV
        - name: release version creating for UAT
          run: | 
             echo '{"releaseCandidate":"${{ env.major}}.${{ env.minor }}.${{ env.releaseCandidate }}","productionRelease":"${{ env.major}}.${{ env.minor }}.${{ env.productionRelease }}","hotFixRelease":"${{ env.hotFixRelease }}"}' > release.json 
             ls -lrt    
        - name: upload Hotfix_release.json artifact to github. 
          uses: actions/upload-artifact@v2
          with:
            name: Anudan-Hotfix-Release
            path: release.json
            retention-days: 1           

  Rsync-Hotfix-Deployments:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/hotfix/production_bug_fixes'
    needs: [Hotfix-Backend-Build, unit-and-functional-testing-Backend, Static-Code-Analysis-Sonarqube-Backend, Anudan-config, Release-repo-checkout]
    name: Copy Artifacts To Hotfix Server
    steps:
    - name: downloading Anudan-Configuration arifact from github. 
      uses: actions/download-artifact@v2
      with:
        name: Anudan-Configuration
    - name: downloading Anudan-backend-artifact from github. 
      uses: actions/download-artifact@v2
      with:
        name: Anudan-backend-artifact     
    - name: downloading Anudan-Hotfix-Release artifact from github. 
      uses: actions/download-artifact@v2
      with:
          name: Anudan-Hotfix-Release     
    - run: |  
          ls -lrt
          pwd
    - name: copy artifacts to Hotfix server. 
      uses: burnett01/rsync-deployments@4.1
      with:
        switches: -avzr -q
        path: .
        remote_path: /home/anudan/github
        remote_host: ${{ secrets.HOST_HOTFIX }}
        remote_port: ${{ secrets.SSH_PORT }}
        remote_user: ${{ secrets.SSH_USER }}
        remote_key: ${{ secrets.SSH_DEPLOY_KEY }}          

  Notify-on-email:
    runs-on: ubuntu-latest
    if: always()
    needs: [Hotfix-Backend-Build, unit-and-functional-testing-Backend, Static-Code-Analysis-Sonarqube-Backend, Anudan-config, Rsync-Hotfix-Deployments, Trigger-Hotfix-Release]
    name: Notify Via Email
    steps:
      - name: Anudan Release artifact downloading      
        uses: actions/download-artifact@v2
        with:
          name: Anudan-Hotfix-Release

      - name: set env variable with bash expression 
        run:   |
         ls -lrt
         echo "Hotfix_Release=`cat release.json | cut -d "," -f3 |cut -d ":" -f2 | sed 's/"//g' |sed 's/}//g'`" >> $GITHUB_ENV
      - name: Send some mail
        uses: wadeww/send-email-action@master
        with:
          server_address: smtp.gmail.com
          port: ${{ secrets.SMTP_SERVER_PORT }}
          username: ${{ secrets.AUTH_USER }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: Hotfix - Build Backend Workflow Finished
          body: Organization Name/Repository - ${{github.repository}} 
          
                ${{ github.actor }} commit message - ${{ env.commitmsg }}
                


                 1. Build Result - ${{needs.Hotfix-Backend-Build.result}}
 
                 2. Test Result (units and functionals) - ${{needs.unit-and-functional-testing-Backend.result}}

                 3. Static Code Analysis Result - ${{needs.Static-Code-Analysis-Sonarqube-Backend.result}}

                 4. Checkout release.json Result - ${{needs.Anudan-config.result}} 
 
                 5. Copy Artifacts To Hotfix Server - ${{needs.Rsync-Hotfix-Deployments.result}}

                 6. Hotfix Release Result - ${{needs.Trigger-Hotfix-Release.result}}

                 7. Anudan - Grant Management System â€º Hotfix Release - ${{ env.Hotfix_Release }}

          to: ${{ secrets.TO_ADDRESSES }}
          from: ${{ secrets.FROM_ADDRESS }}          

        
 
